//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : _GARFUNKELENUMS_H.h
//  @ Date : 6/14/2012
//  @ Author : 
//
//


#if !defined(_GARFUNKELENUMS_H)
#define _GARFUNKELENUMS_H
#pragma once
namespace Garfunkel
{
	#define ADDRESS_INSTANCE            "Oa"   //For UI
    #define IPC_MESSAGE_TIMEOUT         5       /*Communication timeout for UI*/
	#define IOBOARD_MESSAGE_TIMEOUT     30      /*Communication timeout for IOBoard */
    #define TIME_TO_WRITE_TO_DATABASE   60*5     /*5 min write the  data to the database.*/
	#define GARFUNKEL_DB_SYNC_TIMEOUT  60*2 // 2 minutes
    //#define ALARM_MUTE_TIME             150    /*2.5 Minute*/
    #define MAX_MUTE_ATTEMPTS    1
	#define MAX_DB_DELAYED_CALLS_TO_EXECUTE     5
	#define GARFUNKEL_LARGE_LOAD_DB_CB         1
	#define GARFUNKEL_MEDIUM_LOAD_DB_CB        3
	#define GARFUNKEL_SMALL_LOAD_DB_CB         6
    #define MAX_TIME_BETWEEN_SIGNAL_IN_SAME_CYCLE 60 //1 min
	#define MAX_NUM_TRIES_FOR_FLUSH_ALARMS 1  // Flush alarms are raised only when the flush error occurs 2nd time
	#define MAX_WAIT_FOR_FLUSH_RESPONSE 60*5
	#define GARFUNKEL_OVER_HIGH_TEMP  160 //160F
	#define GARFUNKEL_HIGH_TEMP  120 //120F
	#define GARFUNKEL_LOW_TEMP   36//36F
	#define MAX_FLUSH_FOR_WATER_INLET_DIAGNOSTICS 10
	typedef enum GARFUNKEL_SYSTEM_STATE
	{
		eBootupInProgress = -1,
		eNotInitalized = 0,
		eIdle = 1,
		eDiagnosticsActive,
		eStandBy
	} GarfunkelSystemState;
	
	typedef enum GARFUNKEL_SCHEDULE
	{
		eNoSchedule=-1,
		ePrimary = 0,
		eSecondary
	} GarfunkelSchedule;
	

	typedef enum GARFUNKEL_MACHINE_MODE
	{
		eNotUsed=-1,
		eStandard = 0,
		eRelay,
		eMicro
	} GarfunkelMachineMode;
	


	typedef enum GARFUNKEL_PUMP_STATE
	{
		eOff = 0,
		eOn
	}GarfunkelPumpState;
	
	typedef enum GARFUNKEL_PRODUCT_STATE
	{
		eProductFull = 0,
		eProductEmpty = 1,
		eProductLow
	}GarfunkelProductState;
	typedef enum GARFUNKEL_PRODUCT_TYPE
	{
		eNotIdentified = -1,
		eSProduct = 0,
	    eP2Product = 1,
	    eO1Product = 2,
	    eO2Product = 3
	}GarfunkelProductType;


	
	typedef enum GARFUNKEL_VALVE_STATE
	{
		eClose = 0,
		eOpen
	}GarfunkelValveState;
	
	typedef enum GARFUNKEL_SWITCH_STATE
	{
		eSwitchClosed = 0,
		eSwitchOpen //1
	}GarfunkelSwitchState;

	typedef enum GARFUNKEL_LEVEL_SWITCH_STATE
	{
		eVirtual = 0,
		eLow,//1
		eNormal, //2
		eFull, //3
		eOverflow//4
	}GarfunkelLevelSwitchState;

	typedef enum ALARM_EVENT /*This has a different order from the AlarmId in the database, here it is listed in priority order*/
    {
		ePowerDownError = 0,
        eIOBoardCommError, //1
        eProductFlushError,  //2
        eFlowSwitchBypassError, //3
        eMSICommError, //4
        eFBoxCommError, //5
        eProductEmptyAlarm,  //6
        eFormulaNotFinished, //7
        eUnused, //8
        eLiquidDosageIncompleteError,//9
    }AlarmEvent;


    typedef enum INTERNAL_ERROR_FOR_OPERATION
        {
    		ePrimeInternalError = 0,
            eCalibInternalError,  //1
            eDiagnosticInternalError,   //2
            eDispensingInternalError //3
        }InternalErrorForOperation;

    typedef enum GARFUNKEL_SYSTEM_COMPONENT
        {
            eUndefinedModel,
            eGarfunkelUI = 0,
            eGarfunkelFBox,
            eGarfunkelIOBoard,
            eGarfunkelMSI
       }GarfunkelSystemComponent;

    typedef enum GARFUNKEL_PRODUCT_DISPENSE_STATE
        {
            eUndefinedState=-1,
            eInit=0,
            eInProductQueue,
            eReadyToBeDispensed,
            eDispenseDone
        }AqugatorProductDispenseState;

	typedef enum EVENT_DATA_LOG_TYPE
    {
        eInitialize = 1,			//1
        eStartUp,					//2
        eSystemError,				//3
        eOperationalAlarm,			//4
        eDateTimeChange,			//5
        eControllerSettingChange,	//6
        eOperationalParameterChange,//7
        eSignalError,				//8
        eSetDefaults,	        	//9
        eSetFactoryDefaults,		//10
        eDiagnostics,				//11 not used
        eHelpSystemAccessed,		//12 not used
        eSoftwareUpgrade,			//13 not used
        eLoadCountData,              //14
        eMenuSystemAccessed,        //15
        eInternalErrors,             //16
        eTempData, //17
        eESPResponseError           //18
    }EventDataLogType;

    //Startup SubEventlog(DB field: SubEventFlags)
    typedef enum STARTUP_DATA_SUB_EVENT_LOG
    {
        eApplicationStartUp = 1,			  //1
        eMachineOn,				  //2
        eMachineOff,			  //3
    }StartUpDataSubEventLog;


    //System Error SubEventlog(DB field: SubEventFlags)
    typedef enum SYSTEM_ERROR_DATA_SUB_EVENT_LOG
    {
        ePowerDownSysError = 1,		 //1
        eIOBCommSysError,			 //2
        eMSICommSysError,			 //3
        eFlushErrorForMachine,  //4
        eMachineFlowSwitchBypassError


    }SystemErrorDataSubEventLog;


    //Operational alarm SubEventlog(DB field: SubEventFlags)
    typedef enum OPER_ALARM_DATA_SUB_EVENT_LOG
    {
        eFBoxCommOperAlarmEvent = 1,
//        eFormulaNotSelectedOperAlarmEvent,		 //2
        eFormulaNotCompletedOperAlarmEvent,			 //2
        eProductEmptyOperAlarmEvent,			 //3
        eLiquidDoseNotComplete //4
    }OperAlarmDataSubEventLog;


    //Date Time Change SubEventlog(DB field: SubEventFlags)
    typedef enum DATE_TIME_CHANGED_DATA_SUB_EVENT_LOG
    {
        eTimeChanged = 1		 //1
    }DateTimeChangedDataSubEventLog;



    //Controller Setting Data SubEventlog(DB field: SubEventFlags)
    typedef enum CONTROLLER_SETTING_CHANGE_DATA_SUB_EVENT_LOG
    {
        eSerialNumber = 1,			  //1
        eIOBoardAddress,				  //2
        eMSIAddress,			  //3
        eFboxAddress, //4
        eControllerlastResetDate,			  //5
        eIOBoardlastResetDate,			  //6
        eMSIlastResetDate,			  //7
        eFBoxlastResetDate			  //8
    }ControllerSettingDataSubEventLog;


    //Operational Data SubEventlog(DB field: SubEventFlags)
    typedef enum OPERATIONAL_PARAMS_CHANGE_DATA_SUB_EVENT_LOG
    {
        eNoOfMachines = 1,			  //1
        eUnitOfMeasure, //2
        ePrimarylanguage,			  //3
        eSecondarylanguage,				  //4
        eTMLanguage,			  //5
        eActiveFormulaState,			  //6
        eOperatingMode,   //7 //not used
        eChartStop, //8 not used
        eFourthProductEnabled, //9 from stored proc
        eDetergentProductChanged, //10 from stored proc
        eBleachProductChanged, //11 from stored proc
        eFinishProductChanged, //12 from stored proc
        eFourthProductChanged, //13 from stored proc
        eLiquidProductChanged, //14 from stored proc
        eLiquidProductEnabled //15 from stored proc
    }OperationalParamChangeDataSubEventLog;

    //Signal Error SubEventlog(DB field: SubEventFlags)
    typedef enum SIGNAL_ERROR_DATA_SUB_EVENT_LOG
    {
        eSignalInvalid = 1,		 //1
        eSignalRecievedOutOfSequence,		 //2
        eSignalFormulaCompleteNotRecieved,		 //3
        eSignalRecievedToRunLockPump,		 //4
        eAllProductsNotDispensedForSignal,      //5
        eProductsNotDispensedForSignal,      //6
        eSignalDeletedInQueue,              //7 The current signal was deleted on the queue, and replaced with newer signal for that machine
        eSignalDeletedChartStopOnFailed,
        eSignalDeletedChartStopOffFailed,
        eSignalAlreadyDispensed
    }SignalErrorDataSubEventLog;


    //Software Upgrade SubEventlog(DB field: SubEventFlags)
    typedef enum SOFTWARE_UPGRADE_DATA_SUB_EVENT_LOG
    {
        eControllerSoftwareUpgrade = 1,	//1
        eIOBoardSoftwareUpgrade,		//2
        eFBoxSoftwareUpgrade,		 //3
        eMSISoftwareUpgrade,		 //4
        eSoftwareApplicationUninstall,//5
        eSoftwareApplicationInstall   //6
    }SoftwareUpgradeDataSubEventLog;



	typedef enum ALARM_STATE
    {
        eAlarmStop = 0,
        eAlarmStart,
		eAlarmMute
    }AlarmStateEvent;
	
    typedef enum FLUSH_ALARM_REASON
    {
    		eNotApplicable = -1,
            eFlushDelay = 0,
            eFlushDrop
    }FlushAlarmReason;

    typedef enum DRAIN_ALARM_REASON
    {
    		eNoDrainAlarmReason=-1,
            eDrainFlushWhenSystemIdle = 0,
            eDrainFlushWhenSystemDispensing,
            eDrainFlushWhenPrimeCalibInProgress
    }DrainFlushAlarmReason;

    typedef enum FORMULA_NOT_FINSIHED_ALARM_REASON
     {
          eNotDefined= -1,
    	  eResetByUser = 0,
          eProductEmptyAlarmState, //1
          eMissedSignal, //2   //when the signal in queue is replaced by a new signal before the dispensing started for the old signal
          eChartStopSignalError, //3 //when Chart stop On or Off failed
          eTimeout,  //4
          eSkippedIncompatibleProduct, //5
          eSystemErrorOccurred, //6
          eLastSignalReceived, //7
          eLastSignalTimedOutInQueue,//8
          eSomeProductSkipped, //9
          ePowerDown
     }FormulaNotFinishedAlarmReason;


      typedef enum GARFUNKEL_FAILED_OPERATION
       {
            eUndefinedFailure = -1,
            eWaterInletValveOpenOperationFailed=0,
            eWaterInletValveCloseOperationFailed,  //1
            eWasherValveOpenOperationFailed,  //2
            eWasherValveCloseOperationFailed,  //3
            eProductValveOpenOperationFailed, //4
            eProductValveCloseOperationFailed,  //5
            eFourthProductFlushValveOpenOperationFailed, //6
            eFourthProductFlushCloseOperationFailed,  //7
            ePumpOnFailed, //8
            ePumpOffFailed, //9
            OperationFailedDueToOutOfProduct, //10
            eSignalsRecievedEvenWhenChartStopIsOn, //11
            eSolidProductDispenseTimeout,//12
            eMaxPulsesReached,//13
            eDispenseAbruptlyStoppedByIOBoard,//14
            eCheckConductivityProbeConnection //15
       }GarfunkelFailedOperations;


       typedef enum GARFUNKEL_ESP_COMMAND_DESTINATION
        {
             eUndefinedDestination = -1,
             eIOBoard=0,
             eMSIBoard,  //1
             eFormulaSelectBoard,  //2
        }GarfunkelESPCommandDestination;


        typedef enum GARFUNKEL_TEMP_DATA
         {
              eUndefinedTemp = -1,
              eLowTempData=0,
              eHighTempData //1
         }GarfunkelTempData;

        typedef enum GARFUNKEL_ESP_RESPONSE
         {
              eUndefinedESPResponse = -1,
              eSocketConnectionNotAvailable=0,
              eFailedToWriteCommand,//1
              eNAKResponse, //2
              eFailedToReadResponse,  //3
              eErrorResponse, //4
         }GarfunkelESPResponse;


         typedef enum GARFUNKEL_ESP_COMMAND
          {
               eUndefinedCommand = -1,
               eDUCommand=0,
               eSUCommand  //1
          }GarfunkelESPCommand;

          typedef enum GARFUNKEL_POCKET
          {
        	  eUndefinedPocket
          }GarfunkelProductPocket;

          typedef enum GARFUNKEL_SPRAY_OBJ_TYPE
           {
                eUndefinedObj = -1,
                eSValve= 0,
                ePValve,
                eAquanomicsToSumpValve,
                eO1Valve,
                eO2Valve,
                eDrainValve,
                eMaxSparyObj
           }GarfunkelSparyObjType;




      #define MAX_NUM_TRIES 1  //Max number of times for sending an config command during initial  config for IOBoard, Fbox and MSI
	
}
#endif  //_GARFUNKELENUMS_H
